/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RestRouteImport } from './routes/rest'
import { Route as ResourceRouteImport } from './routes/resource'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ResourceIndexRouteImport } from './routes/resource.index'
import { Route as ResourceResourceTypeRouteImport } from './routes/resource.$resourceType'
import { Route as ResourceResourceTypeIndexRouteImport } from './routes/resource.$resourceType.index'
import { Route as ResourceResourceTypeCreateRouteImport } from './routes/resource.$resourceType.create'
import { Route as ResourceResourceTypeEditIdRouteImport } from './routes/resource.$resourceType.edit.$id'

const RestRoute = RestRouteImport.update({
  id: '/rest',
  path: '/rest',
  getParentRoute: () => rootRouteImport,
} as any)
const ResourceRoute = ResourceRouteImport.update({
  id: '/resource',
  path: '/resource',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ResourceIndexRoute = ResourceIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ResourceRoute,
} as any)
const ResourceResourceTypeRoute = ResourceResourceTypeRouteImport.update({
  id: '/$resourceType',
  path: '/$resourceType',
  getParentRoute: () => ResourceRoute,
} as any)
const ResourceResourceTypeIndexRoute =
  ResourceResourceTypeIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => ResourceResourceTypeRoute,
  } as any)
const ResourceResourceTypeCreateRoute =
  ResourceResourceTypeCreateRouteImport.update({
    id: '/create',
    path: '/create',
    getParentRoute: () => ResourceResourceTypeRoute,
  } as any)
const ResourceResourceTypeEditIdRoute =
  ResourceResourceTypeEditIdRouteImport.update({
    id: '/edit/$id',
    path: '/edit/$id',
    getParentRoute: () => ResourceResourceTypeRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/resource': typeof ResourceRouteWithChildren
  '/rest': typeof RestRoute
  '/resource/$resourceType': typeof ResourceResourceTypeRouteWithChildren
  '/resource/': typeof ResourceIndexRoute
  '/resource/$resourceType/create': typeof ResourceResourceTypeCreateRoute
  '/resource/$resourceType/': typeof ResourceResourceTypeIndexRoute
  '/resource/$resourceType/edit/$id': typeof ResourceResourceTypeEditIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/rest': typeof RestRoute
  '/resource': typeof ResourceIndexRoute
  '/resource/$resourceType/create': typeof ResourceResourceTypeCreateRoute
  '/resource/$resourceType': typeof ResourceResourceTypeIndexRoute
  '/resource/$resourceType/edit/$id': typeof ResourceResourceTypeEditIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/resource': typeof ResourceRouteWithChildren
  '/rest': typeof RestRoute
  '/resource/$resourceType': typeof ResourceResourceTypeRouteWithChildren
  '/resource/': typeof ResourceIndexRoute
  '/resource/$resourceType/create': typeof ResourceResourceTypeCreateRoute
  '/resource/$resourceType/': typeof ResourceResourceTypeIndexRoute
  '/resource/$resourceType/edit/$id': typeof ResourceResourceTypeEditIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/resource'
    | '/rest'
    | '/resource/$resourceType'
    | '/resource/'
    | '/resource/$resourceType/create'
    | '/resource/$resourceType/'
    | '/resource/$resourceType/edit/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/rest'
    | '/resource'
    | '/resource/$resourceType/create'
    | '/resource/$resourceType'
    | '/resource/$resourceType/edit/$id'
  id:
    | '__root__'
    | '/'
    | '/resource'
    | '/rest'
    | '/resource/$resourceType'
    | '/resource/'
    | '/resource/$resourceType/create'
    | '/resource/$resourceType/'
    | '/resource/$resourceType/edit/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ResourceRoute: typeof ResourceRouteWithChildren
  RestRoute: typeof RestRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/rest': {
      id: '/rest'
      path: '/rest'
      fullPath: '/rest'
      preLoaderRoute: typeof RestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/resource': {
      id: '/resource'
      path: '/resource'
      fullPath: '/resource'
      preLoaderRoute: typeof ResourceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/resource/': {
      id: '/resource/'
      path: '/'
      fullPath: '/resource/'
      preLoaderRoute: typeof ResourceIndexRouteImport
      parentRoute: typeof ResourceRoute
    }
    '/resource/$resourceType': {
      id: '/resource/$resourceType'
      path: '/$resourceType'
      fullPath: '/resource/$resourceType'
      preLoaderRoute: typeof ResourceResourceTypeRouteImport
      parentRoute: typeof ResourceRoute
    }
    '/resource/$resourceType/': {
      id: '/resource/$resourceType/'
      path: '/'
      fullPath: '/resource/$resourceType/'
      preLoaderRoute: typeof ResourceResourceTypeIndexRouteImport
      parentRoute: typeof ResourceResourceTypeRoute
    }
    '/resource/$resourceType/create': {
      id: '/resource/$resourceType/create'
      path: '/create'
      fullPath: '/resource/$resourceType/create'
      preLoaderRoute: typeof ResourceResourceTypeCreateRouteImport
      parentRoute: typeof ResourceResourceTypeRoute
    }
    '/resource/$resourceType/edit/$id': {
      id: '/resource/$resourceType/edit/$id'
      path: '/edit/$id'
      fullPath: '/resource/$resourceType/edit/$id'
      preLoaderRoute: typeof ResourceResourceTypeEditIdRouteImport
      parentRoute: typeof ResourceResourceTypeRoute
    }
  }
}

interface ResourceResourceTypeRouteChildren {
  ResourceResourceTypeCreateRoute: typeof ResourceResourceTypeCreateRoute
  ResourceResourceTypeIndexRoute: typeof ResourceResourceTypeIndexRoute
  ResourceResourceTypeEditIdRoute: typeof ResourceResourceTypeEditIdRoute
}

const ResourceResourceTypeRouteChildren: ResourceResourceTypeRouteChildren = {
  ResourceResourceTypeCreateRoute: ResourceResourceTypeCreateRoute,
  ResourceResourceTypeIndexRoute: ResourceResourceTypeIndexRoute,
  ResourceResourceTypeEditIdRoute: ResourceResourceTypeEditIdRoute,
}

const ResourceResourceTypeRouteWithChildren =
  ResourceResourceTypeRoute._addFileChildren(ResourceResourceTypeRouteChildren)

interface ResourceRouteChildren {
  ResourceResourceTypeRoute: typeof ResourceResourceTypeRouteWithChildren
  ResourceIndexRoute: typeof ResourceIndexRoute
}

const ResourceRouteChildren: ResourceRouteChildren = {
  ResourceResourceTypeRoute: ResourceResourceTypeRouteWithChildren,
  ResourceIndexRoute: ResourceIndexRoute,
}

const ResourceRouteWithChildren = ResourceRoute._addFileChildren(
  ResourceRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ResourceRoute: ResourceRouteWithChildren,
  RestRoute: RestRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
