/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as VaivRouteImport } from './routes/vaiv'
import { Route as RestRouteImport } from './routes/rest'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ResourceTypeViewDefinitionRouteImport } from './routes/resourceType/ViewDefinition'
import { Route as ViewDefinitionNewRouteImport } from './routes/ViewDefinition/new'
import { Route as ViewDefinitionIdRouteImport } from './routes/ViewDefinition/$id'

const VaivRoute = VaivRouteImport.update({
  id: '/vaiv',
  path: '/vaiv',
  getParentRoute: () => rootRouteImport,
} as any)
const RestRoute = RestRouteImport.update({
  id: '/rest',
  path: '/rest',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ResourceTypeViewDefinitionRoute =
  ResourceTypeViewDefinitionRouteImport.update({
    id: '/resourceType/ViewDefinition',
    path: '/resourceType/ViewDefinition',
    getParentRoute: () => rootRouteImport,
  } as any)
const ViewDefinitionNewRoute = ViewDefinitionNewRouteImport.update({
  id: '/ViewDefinition/new',
  path: '/ViewDefinition/new',
  getParentRoute: () => rootRouteImport,
} as any)
const ViewDefinitionIdRoute = ViewDefinitionIdRouteImport.update({
  id: '/ViewDefinition/$id',
  path: '/ViewDefinition/$id',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/rest': typeof RestRoute
  '/vaiv': typeof VaivRoute
  '/ViewDefinition/$id': typeof ViewDefinitionIdRoute
  '/ViewDefinition/new': typeof ViewDefinitionNewRoute
  '/resourceType/ViewDefinition': typeof ResourceTypeViewDefinitionRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/rest': typeof RestRoute
  '/vaiv': typeof VaivRoute
  '/ViewDefinition/$id': typeof ViewDefinitionIdRoute
  '/ViewDefinition/new': typeof ViewDefinitionNewRoute
  '/resourceType/ViewDefinition': typeof ResourceTypeViewDefinitionRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/rest': typeof RestRoute
  '/vaiv': typeof VaivRoute
  '/ViewDefinition/$id': typeof ViewDefinitionIdRoute
  '/ViewDefinition/new': typeof ViewDefinitionNewRoute
  '/resourceType/ViewDefinition': typeof ResourceTypeViewDefinitionRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/rest'
    | '/vaiv'
    | '/ViewDefinition/$id'
    | '/ViewDefinition/new'
    | '/resourceType/ViewDefinition'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/rest'
    | '/vaiv'
    | '/ViewDefinition/$id'
    | '/ViewDefinition/new'
    | '/resourceType/ViewDefinition'
  id:
    | '__root__'
    | '/'
    | '/rest'
    | '/vaiv'
    | '/ViewDefinition/$id'
    | '/ViewDefinition/new'
    | '/resourceType/ViewDefinition'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  RestRoute: typeof RestRoute
  VaivRoute: typeof VaivRoute
  ViewDefinitionIdRoute: typeof ViewDefinitionIdRoute
  ViewDefinitionNewRoute: typeof ViewDefinitionNewRoute
  ResourceTypeViewDefinitionRoute: typeof ResourceTypeViewDefinitionRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/vaiv': {
      id: '/vaiv'
      path: '/vaiv'
      fullPath: '/vaiv'
      preLoaderRoute: typeof VaivRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/rest': {
      id: '/rest'
      path: '/rest'
      fullPath: '/rest'
      preLoaderRoute: typeof RestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/resourceType/ViewDefinition': {
      id: '/resourceType/ViewDefinition'
      path: '/resourceType/ViewDefinition'
      fullPath: '/resourceType/ViewDefinition'
      preLoaderRoute: typeof ResourceTypeViewDefinitionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ViewDefinition/new': {
      id: '/ViewDefinition/new'
      path: '/ViewDefinition/new'
      fullPath: '/ViewDefinition/new'
      preLoaderRoute: typeof ViewDefinitionNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ViewDefinition/$id': {
      id: '/ViewDefinition/$id'
      path: '/ViewDefinition/$id'
      fullPath: '/ViewDefinition/$id'
      preLoaderRoute: typeof ViewDefinitionIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  RestRoute: RestRoute,
  VaivRoute: VaivRoute,
  ViewDefinitionIdRoute: ViewDefinitionIdRoute,
  ViewDefinitionNewRoute: ViewDefinitionNewRoute,
  ResourceTypeViewDefinitionRoute: ResourceTypeViewDefinitionRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
