/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RestRouteImport } from './routes/rest'
import { Route as ResourceTypesRouteImport } from './routes/resource-types'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ResourceTypesIndexRouteImport } from './routes/resource-types.index'
import { Route as ResourceCreateResourceTypeRouteImport } from './routes/resource-create.$resourceType'
import { Route as ResourceListResourceTypeIndexRouteImport } from './routes/resource-list.$resourceType.index'
import { Route as ResourceEditResourceTypeIdRouteImport } from './routes/resource-edit.$resourceType.$id'

const RestRoute = RestRouteImport.update({
  id: '/rest',
  path: '/rest',
  getParentRoute: () => rootRouteImport,
} as any)
const ResourceTypesRoute = ResourceTypesRouteImport.update({
  id: '/resource-types',
  path: '/resource-types',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ResourceTypesIndexRoute = ResourceTypesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ResourceTypesRoute,
} as any)
const ResourceCreateResourceTypeRoute =
  ResourceCreateResourceTypeRouteImport.update({
    id: '/resource-create/$resourceType',
    path: '/resource-create/$resourceType',
    getParentRoute: () => rootRouteImport,
  } as any)
const ResourceListResourceTypeIndexRoute =
  ResourceListResourceTypeIndexRouteImport.update({
    id: '/resource-list/$resourceType/',
    path: '/resource-list/$resourceType/',
    getParentRoute: () => rootRouteImport,
  } as any)
const ResourceEditResourceTypeIdRoute =
  ResourceEditResourceTypeIdRouteImport.update({
    id: '/resource-edit/$resourceType/$id',
    path: '/resource-edit/$resourceType/$id',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/resource-types': typeof ResourceTypesRouteWithChildren
  '/rest': typeof RestRoute
  '/resource-create/$resourceType': typeof ResourceCreateResourceTypeRoute
  '/resource-types/': typeof ResourceTypesIndexRoute
  '/resource-edit/$resourceType/$id': typeof ResourceEditResourceTypeIdRoute
  '/resource-list/$resourceType': typeof ResourceListResourceTypeIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/rest': typeof RestRoute
  '/resource-create/$resourceType': typeof ResourceCreateResourceTypeRoute
  '/resource-types': typeof ResourceTypesIndexRoute
  '/resource-edit/$resourceType/$id': typeof ResourceEditResourceTypeIdRoute
  '/resource-list/$resourceType': typeof ResourceListResourceTypeIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/resource-types': typeof ResourceTypesRouteWithChildren
  '/rest': typeof RestRoute
  '/resource-create/$resourceType': typeof ResourceCreateResourceTypeRoute
  '/resource-types/': typeof ResourceTypesIndexRoute
  '/resource-edit/$resourceType/$id': typeof ResourceEditResourceTypeIdRoute
  '/resource-list/$resourceType/': typeof ResourceListResourceTypeIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/resource-types'
    | '/rest'
    | '/resource-create/$resourceType'
    | '/resource-types/'
    | '/resource-edit/$resourceType/$id'
    | '/resource-list/$resourceType'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/rest'
    | '/resource-create/$resourceType'
    | '/resource-types'
    | '/resource-edit/$resourceType/$id'
    | '/resource-list/$resourceType'
  id:
    | '__root__'
    | '/'
    | '/resource-types'
    | '/rest'
    | '/resource-create/$resourceType'
    | '/resource-types/'
    | '/resource-edit/$resourceType/$id'
    | '/resource-list/$resourceType/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ResourceTypesRoute: typeof ResourceTypesRouteWithChildren
  RestRoute: typeof RestRoute
  ResourceCreateResourceTypeRoute: typeof ResourceCreateResourceTypeRoute
  ResourceEditResourceTypeIdRoute: typeof ResourceEditResourceTypeIdRoute
  ResourceListResourceTypeIndexRoute: typeof ResourceListResourceTypeIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/rest': {
      id: '/rest'
      path: '/rest'
      fullPath: '/rest'
      preLoaderRoute: typeof RestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/resource-types': {
      id: '/resource-types'
      path: '/resource-types'
      fullPath: '/resource-types'
      preLoaderRoute: typeof ResourceTypesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/resource-types/': {
      id: '/resource-types/'
      path: '/'
      fullPath: '/resource-types/'
      preLoaderRoute: typeof ResourceTypesIndexRouteImport
      parentRoute: typeof ResourceTypesRoute
    }
    '/resource-create/$resourceType': {
      id: '/resource-create/$resourceType'
      path: '/resource-create/$resourceType'
      fullPath: '/resource-create/$resourceType'
      preLoaderRoute: typeof ResourceCreateResourceTypeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/resource-list/$resourceType/': {
      id: '/resource-list/$resourceType/'
      path: '/resource-list/$resourceType'
      fullPath: '/resource-list/$resourceType'
      preLoaderRoute: typeof ResourceListResourceTypeIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/resource-edit/$resourceType/$id': {
      id: '/resource-edit/$resourceType/$id'
      path: '/resource-edit/$resourceType/$id'
      fullPath: '/resource-edit/$resourceType/$id'
      preLoaderRoute: typeof ResourceEditResourceTypeIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

interface ResourceTypesRouteChildren {
  ResourceTypesIndexRoute: typeof ResourceTypesIndexRoute
}

const ResourceTypesRouteChildren: ResourceTypesRouteChildren = {
  ResourceTypesIndexRoute: ResourceTypesIndexRoute,
}

const ResourceTypesRouteWithChildren = ResourceTypesRoute._addFileChildren(
  ResourceTypesRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ResourceTypesRoute: ResourceTypesRouteWithChildren,
  RestRoute: RestRoute,
  ResourceCreateResourceTypeRoute: ResourceCreateResourceTypeRoute,
  ResourceEditResourceTypeIdRoute: ResourceEditResourceTypeIdRoute,
  ResourceListResourceTypeIndexRoute: ResourceListResourceTypeIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
